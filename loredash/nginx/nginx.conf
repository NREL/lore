# Three entities:
#   - clients (web browser)
#   - reverse proxy (nginx)
#   - proxied server (gunicorn)
#
#   Clients make requests that are passed to the proxied web server(s)
#   (i.e., gunicorn) via nginx.
#   Responses then come from the proxied server through nginx back to the
#   clients.
#
#   Nginx however intercepts static file requests (e.g., graphics shown
#   on webpage) and serves those itself instead of passing that request on
#   to the gunicorn webserver.


# The upstream context is used to define and configure “upstream” servers.
#  Basically, this context defines a named pool of servers that Nginx can
#  then proxy requests to (e.g., gunicorn). The upstream context can then
#  be referenced by name within server or location blocks to pass requests
#  of a certain type to the pool of servers that have been defined. The
#  upstream will then use an algorithm to determine which specific server
#  to hand the request to.
upstream loredash {
    server 10.10.10.10:8000;
}

server {
    # Port 80 is what the original 1330 port in the web browser is mapped (routed)
    #  to, which is specified in docker-compose.yml. When a service is listening on
    #  0.0.0.0 this means the service is listening on all the configured network
    #  interfaces, including the loopback (127.0.0.1). So the following can also be:
    #  'listen 0.0.0.0:80;'
    listen 10.10.10.12:80;

    # Each 'location' below is used to handle a certain type of client request, and
    #  each is selected by virtue of matching the location definition against the
    #  client request. Below, '/' and '/static/' are the match criteria.

    # The location block '/' is the shortest prefix (compared to /static/), so only
    # if all other location blocks fail to provide a match will this block be used. 
    # When this block is used, all requests will be passed to the proxied server
    # at http://loredash, or 127.0.0.1:8000 as specified above via upstream
    location / {
        proxy_pass http://loredash;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;

        # The following are an attempt to fix the 504 Gateway Time-out from nginx:
        proxy_connect_timeout       300;
        proxy_send_timeout          300;
        proxy_read_timeout          300;
        send_timeout                300;
    }

    # This '/static/' is from the web request URL
    location /static/ {
        # This '/loredash/static/' is the local directory (or in this case the shared
        #  volume between containers, as defined in docker-compose.yml)
        alias /loredash/static/;
    }

}
